generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  username        String?           @unique
  password        String
  email           String            @unique
  emailVerified   DateTime?         @map("email_verified")
  image           String?
  role            Role              @default(user)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  bio             String?
  showActivity    Boolean           @default(true) @map("show_activity")
  showFavorites   Boolean           @default(true) @map("show_favorites")
  accounts        Account[]
  activityHistory ActivityHistory[]
  comments        Comment[]
  favoriteSources FavoriteSource[]
  followers       Follow[]          @relation("follower")
  following       Follow[]          @relation("following")
  ratings         Rating[]
  sentMessages    DirectMessage[]   @relation("SentMessages")
  receivedMessages DirectMessage[]  @relation("ReceivedMessages")

  @@map("users")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Source {
  id              String           @id @default(cuid())
  name            String
  description     String
  url             String           @db.VarChar(512)
  imageUrl        String?          @map("image_url") @db.VarChar(512)
  category        String
  language        String
  country         String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  comments        Comment[]
  favoriteSources FavoriteSource[]
  ratings         Rating[]

  @@fulltext([name, description])
  @@map("sources")
}

model FavoriteSource {
  userId    String   @map("user_id")
  sourceId  String   @map("source_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  source    Source   @relation(fields: [sourceId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, sourceId])
  @@index([sourceId], map: "favorite_sources_source_id_fkey")
  @@map("favorite_sources")
}

model Rating {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  sourceId  String   @map("source_id")
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  source    Source   @relation(fields: [sourceId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sourceId])
  @@index([sourceId], map: "ratings_source_id_fkey")
  @@map("ratings")
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  userId    String    @map("user_id")
  sourceId  String    @map("source_id")
  isDeleted Boolean   @default(false) @map("is_deleted")
  parentId  String?   @map("parent_id")
  depth     Int       @default(1)
  path      String    @default("/")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parent    Comment?  @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentHierarchy")
  source    Source    @relation(fields: [sourceId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sourceId])
  @@index([parentId])
  @@index([path])
  @@map("comments")
}

model Follow {
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model ActivityHistory {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  type       String
  sourceName String?  @map("source_name")
  userName   String?  @map("user_name")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("activity_history")
}

model DirectMessage {
  id         String   @id @default(cuid())
  content    String   @db.Text
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  read       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

 @@index([senderId, receiverId])
  @@index([createdAt])
  @@map("direct_messages")
}

enum Role {
  user
  admin
}